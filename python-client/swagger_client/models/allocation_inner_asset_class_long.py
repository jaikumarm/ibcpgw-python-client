# coding: utf-8

"""
    Client Portal Web API

    Production version of the Client Portal Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AllocationInnerAssetClassLong(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stk': 'float',
        'opt': 'float',
        'fut': 'float',
        'war': 'float',
        'bond': 'float',
        'cash': 'float'
    }

    attribute_map = {
        'stk': 'STK',
        'opt': 'OPT',
        'fut': 'FUT',
        'war': 'WAR',
        'bond': 'BOND',
        'cash': 'CASH'
    }

    def __init__(self, stk=None, opt=None, fut=None, war=None, bond=None, cash=None):  # noqa: E501
        """AllocationInnerAssetClassLong - a model defined in Swagger"""  # noqa: E501

        self._stk = None
        self._opt = None
        self._fut = None
        self._war = None
        self._bond = None
        self._cash = None
        self.discriminator = None

        if stk is not None:
            self.stk = stk
        if opt is not None:
            self.opt = opt
        if fut is not None:
            self.fut = fut
        if war is not None:
            self.war = war
        if bond is not None:
            self.bond = bond
        if cash is not None:
            self.cash = cash

    @property
    def stk(self):
        """Gets the stk of this AllocationInnerAssetClassLong.  # noqa: E501


        :return: The stk of this AllocationInnerAssetClassLong.  # noqa: E501
        :rtype: float
        """
        return self._stk

    @stk.setter
    def stk(self, stk):
        """Sets the stk of this AllocationInnerAssetClassLong.


        :param stk: The stk of this AllocationInnerAssetClassLong.  # noqa: E501
        :type: float
        """

        self._stk = stk

    @property
    def opt(self):
        """Gets the opt of this AllocationInnerAssetClassLong.  # noqa: E501


        :return: The opt of this AllocationInnerAssetClassLong.  # noqa: E501
        :rtype: float
        """
        return self._opt

    @opt.setter
    def opt(self, opt):
        """Sets the opt of this AllocationInnerAssetClassLong.


        :param opt: The opt of this AllocationInnerAssetClassLong.  # noqa: E501
        :type: float
        """

        self._opt = opt

    @property
    def fut(self):
        """Gets the fut of this AllocationInnerAssetClassLong.  # noqa: E501


        :return: The fut of this AllocationInnerAssetClassLong.  # noqa: E501
        :rtype: float
        """
        return self._fut

    @fut.setter
    def fut(self, fut):
        """Sets the fut of this AllocationInnerAssetClassLong.


        :param fut: The fut of this AllocationInnerAssetClassLong.  # noqa: E501
        :type: float
        """

        self._fut = fut

    @property
    def war(self):
        """Gets the war of this AllocationInnerAssetClassLong.  # noqa: E501


        :return: The war of this AllocationInnerAssetClassLong.  # noqa: E501
        :rtype: float
        """
        return self._war

    @war.setter
    def war(self, war):
        """Sets the war of this AllocationInnerAssetClassLong.


        :param war: The war of this AllocationInnerAssetClassLong.  # noqa: E501
        :type: float
        """

        self._war = war

    @property
    def bond(self):
        """Gets the bond of this AllocationInnerAssetClassLong.  # noqa: E501


        :return: The bond of this AllocationInnerAssetClassLong.  # noqa: E501
        :rtype: float
        """
        return self._bond

    @bond.setter
    def bond(self, bond):
        """Sets the bond of this AllocationInnerAssetClassLong.


        :param bond: The bond of this AllocationInnerAssetClassLong.  # noqa: E501
        :type: float
        """

        self._bond = bond

    @property
    def cash(self):
        """Gets the cash of this AllocationInnerAssetClassLong.  # noqa: E501


        :return: The cash of this AllocationInnerAssetClassLong.  # noqa: E501
        :rtype: float
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this AllocationInnerAssetClassLong.


        :param cash: The cash of this AllocationInnerAssetClassLong.  # noqa: E501
        :type: float
        """

        self._cash = cash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllocationInnerAssetClassLong, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllocationInnerAssetClassLong):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

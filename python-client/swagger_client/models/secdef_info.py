# coding: utf-8

"""
    Client Portal Web API

    Production version of the Client Portal Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SecdefInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conid': 'float',
        'sec_type': 'str',
        'exchange': 'str',
        'symbol': 'str',
        'desc1': 'str',
        'desc2': 'str',
        'currency': 'str',
        'strike': 'str',
        'right': 'str',
        'trading_class': 'str',
        'listing_exchange': 'str',
        'valid_exchanges': 'str'
    }

    attribute_map = {
        'conid': 'conid',
        'sec_type': 'secType',
        'exchange': 'exchange',
        'symbol': 'symbol',
        'desc1': 'desc1',
        'desc2': 'desc2',
        'currency': 'currency',
        'strike': 'strike',
        'right': 'right',
        'trading_class': 'tradingClass',
        'listing_exchange': 'listingExchange',
        'valid_exchanges': 'validExchanges'
    }

    def __init__(self, conid=None, sec_type=None, exchange=None, symbol=None, desc1=None, desc2=None, currency=None, strike=None, right=None, trading_class=None, listing_exchange=None, valid_exchanges=None):  # noqa: E501
        """SecdefInfo - a model defined in Swagger"""  # noqa: E501

        self._conid = None
        self._sec_type = None
        self._exchange = None
        self._symbol = None
        self._desc1 = None
        self._desc2 = None
        self._currency = None
        self._strike = None
        self._right = None
        self._trading_class = None
        self._listing_exchange = None
        self._valid_exchanges = None
        self.discriminator = None

        if conid is not None:
            self.conid = conid
        if sec_type is not None:
            self.sec_type = sec_type
        if exchange is not None:
            self.exchange = exchange
        if symbol is not None:
            self.symbol = symbol
        if desc1 is not None:
            self.desc1 = desc1
        if desc2 is not None:
            self.desc2 = desc2
        if currency is not None:
            self.currency = currency
        if strike is not None:
            self.strike = strike
        if right is not None:
            self.right = right
        if trading_class is not None:
            self.trading_class = trading_class
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if valid_exchanges is not None:
            self.valid_exchanges = valid_exchanges

    @property
    def conid(self):
        """Gets the conid of this SecdefInfo.  # noqa: E501


        :return: The conid of this SecdefInfo.  # noqa: E501
        :rtype: float
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this SecdefInfo.


        :param conid: The conid of this SecdefInfo.  # noqa: E501
        :type: float
        """

        self._conid = conid

    @property
    def sec_type(self):
        """Gets the sec_type of this SecdefInfo.  # noqa: E501


        :return: The sec_type of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this SecdefInfo.


        :param sec_type: The sec_type of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    @property
    def exchange(self):
        """Gets the exchange of this SecdefInfo.  # noqa: E501


        :return: The exchange of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this SecdefInfo.


        :param exchange: The exchange of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def symbol(self):
        """Gets the symbol of this SecdefInfo.  # noqa: E501

        for example FB  # noqa: E501

        :return: The symbol of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this SecdefInfo.

        for example FB  # noqa: E501

        :param symbol: The symbol of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def desc1(self):
        """Gets the desc1 of this SecdefInfo.  # noqa: E501


        :return: The desc1 of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._desc1

    @desc1.setter
    def desc1(self, desc1):
        """Sets the desc1 of this SecdefInfo.


        :param desc1: The desc1 of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._desc1 = desc1

    @property
    def desc2(self):
        """Gets the desc2 of this SecdefInfo.  # noqa: E501


        :return: The desc2 of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._desc2

    @desc2.setter
    def desc2(self, desc2):
        """Sets the desc2 of this SecdefInfo.


        :param desc2: The desc2 of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._desc2 = desc2

    @property
    def currency(self):
        """Gets the currency of this SecdefInfo.  # noqa: E501


        :return: The currency of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SecdefInfo.


        :param currency: The currency of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def strike(self):
        """Gets the strike of this SecdefInfo.  # noqa: E501


        :return: The strike of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this SecdefInfo.


        :param strike: The strike of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._strike = strike

    @property
    def right(self):
        """Gets the right of this SecdefInfo.  # noqa: E501


        :return: The right of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this SecdefInfo.


        :param right: The right of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._right = right

    @property
    def trading_class(self):
        """Gets the trading_class of this SecdefInfo.  # noqa: E501


        :return: The trading_class of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._trading_class

    @trading_class.setter
    def trading_class(self, trading_class):
        """Sets the trading_class of this SecdefInfo.


        :param trading_class: The trading_class of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._trading_class = trading_class

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this SecdefInfo.  # noqa: E501


        :return: The listing_exchange of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this SecdefInfo.


        :param listing_exchange: The listing_exchange of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def valid_exchanges(self):
        """Gets the valid_exchanges of this SecdefInfo.  # noqa: E501


        :return: The valid_exchanges of this SecdefInfo.  # noqa: E501
        :rtype: str
        """
        return self._valid_exchanges

    @valid_exchanges.setter
    def valid_exchanges(self, valid_exchanges):
        """Sets the valid_exchanges of this SecdefInfo.


        :param valid_exchanges: The valid_exchanges of this SecdefInfo.  # noqa: E501
        :type: str
        """

        self._valid_exchanges = valid_exchanges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecdefInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecdefInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

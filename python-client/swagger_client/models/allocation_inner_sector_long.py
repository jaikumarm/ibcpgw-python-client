# coding: utf-8

"""
    Client Portal Web API

    Production version of the Client Portal Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AllocationInnerSectorLong(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'others': 'float',
        'utilities': 'float',
        'energy': 'float',
        'technology': 'float',
        'financial': 'float',
        'communications': 'float'
    }

    attribute_map = {
        'others': 'Others',
        'utilities': 'Utilities',
        'energy': 'Energy',
        'technology': 'Technology',
        'financial': 'Financial',
        'communications': 'Communications'
    }

    def __init__(self, others=None, utilities=None, energy=None, technology=None, financial=None, communications=None):  # noqa: E501
        """AllocationInnerSectorLong - a model defined in Swagger"""  # noqa: E501

        self._others = None
        self._utilities = None
        self._energy = None
        self._technology = None
        self._financial = None
        self._communications = None
        self.discriminator = None

        if others is not None:
            self.others = others
        if utilities is not None:
            self.utilities = utilities
        if energy is not None:
            self.energy = energy
        if technology is not None:
            self.technology = technology
        if financial is not None:
            self.financial = financial
        if communications is not None:
            self.communications = communications

    @property
    def others(self):
        """Gets the others of this AllocationInnerSectorLong.  # noqa: E501


        :return: The others of this AllocationInnerSectorLong.  # noqa: E501
        :rtype: float
        """
        return self._others

    @others.setter
    def others(self, others):
        """Sets the others of this AllocationInnerSectorLong.


        :param others: The others of this AllocationInnerSectorLong.  # noqa: E501
        :type: float
        """

        self._others = others

    @property
    def utilities(self):
        """Gets the utilities of this AllocationInnerSectorLong.  # noqa: E501


        :return: The utilities of this AllocationInnerSectorLong.  # noqa: E501
        :rtype: float
        """
        return self._utilities

    @utilities.setter
    def utilities(self, utilities):
        """Sets the utilities of this AllocationInnerSectorLong.


        :param utilities: The utilities of this AllocationInnerSectorLong.  # noqa: E501
        :type: float
        """

        self._utilities = utilities

    @property
    def energy(self):
        """Gets the energy of this AllocationInnerSectorLong.  # noqa: E501


        :return: The energy of this AllocationInnerSectorLong.  # noqa: E501
        :rtype: float
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this AllocationInnerSectorLong.


        :param energy: The energy of this AllocationInnerSectorLong.  # noqa: E501
        :type: float
        """

        self._energy = energy

    @property
    def technology(self):
        """Gets the technology of this AllocationInnerSectorLong.  # noqa: E501


        :return: The technology of this AllocationInnerSectorLong.  # noqa: E501
        :rtype: float
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this AllocationInnerSectorLong.


        :param technology: The technology of this AllocationInnerSectorLong.  # noqa: E501
        :type: float
        """

        self._technology = technology

    @property
    def financial(self):
        """Gets the financial of this AllocationInnerSectorLong.  # noqa: E501


        :return: The financial of this AllocationInnerSectorLong.  # noqa: E501
        :rtype: float
        """
        return self._financial

    @financial.setter
    def financial(self, financial):
        """Sets the financial of this AllocationInnerSectorLong.


        :param financial: The financial of this AllocationInnerSectorLong.  # noqa: E501
        :type: float
        """

        self._financial = financial

    @property
    def communications(self):
        """Gets the communications of this AllocationInnerSectorLong.  # noqa: E501


        :return: The communications of this AllocationInnerSectorLong.  # noqa: E501
        :rtype: float
        """
        return self._communications

    @communications.setter
    def communications(self, communications):
        """Sets the communications of this AllocationInnerSectorLong.


        :param communications: The communications of this AllocationInnerSectorLong.  # noqa: E501
        :type: float
        """

        self._communications = communications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllocationInnerSectorLong, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllocationInnerSectorLong):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

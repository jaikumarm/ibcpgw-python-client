# coding: utf-8

"""
    Client Portal Web API

    Production version of the Client Portal Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AllocationInnerGroupShort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'banks': 'float',
        'airlines': 'float',
        'internet': 'float'
    }

    attribute_map = {
        'banks': 'Banks',
        'airlines': 'Airlines',
        'internet': 'Internet'
    }

    def __init__(self, banks=None, airlines=None, internet=None):  # noqa: E501
        """AllocationInnerGroupShort - a model defined in Swagger"""  # noqa: E501

        self._banks = None
        self._airlines = None
        self._internet = None
        self.discriminator = None

        if banks is not None:
            self.banks = banks
        if airlines is not None:
            self.airlines = airlines
        if internet is not None:
            self.internet = internet

    @property
    def banks(self):
        """Gets the banks of this AllocationInnerGroupShort.  # noqa: E501


        :return: The banks of this AllocationInnerGroupShort.  # noqa: E501
        :rtype: float
        """
        return self._banks

    @banks.setter
    def banks(self, banks):
        """Sets the banks of this AllocationInnerGroupShort.


        :param banks: The banks of this AllocationInnerGroupShort.  # noqa: E501
        :type: float
        """

        self._banks = banks

    @property
    def airlines(self):
        """Gets the airlines of this AllocationInnerGroupShort.  # noqa: E501


        :return: The airlines of this AllocationInnerGroupShort.  # noqa: E501
        :rtype: float
        """
        return self._airlines

    @airlines.setter
    def airlines(self, airlines):
        """Sets the airlines of this AllocationInnerGroupShort.


        :param airlines: The airlines of this AllocationInnerGroupShort.  # noqa: E501
        :type: float
        """

        self._airlines = airlines

    @property
    def internet(self):
        """Gets the internet of this AllocationInnerGroupShort.  # noqa: E501


        :return: The internet of this AllocationInnerGroupShort.  # noqa: E501
        :rtype: float
        """
        return self._internet

    @internet.setter
    def internet(self, internet):
        """Sets the internet of this AllocationInnerGroupShort.


        :param internet: The internet of this AllocationInnerGroupShort.  # noqa: E501
        :type: float
        """

        self._internet = internet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllocationInnerGroupShort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllocationInnerGroupShort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Client Portal Web API

    Production version of the Client Portal Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Trade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'execution_id': 'str',
        'symbol': 'str',
        'side': 'str',
        'order_description': 'str',
        'trade_time': 'str',
        'trade_time_r': 'float',
        'size': 'str',
        'price': 'str',
        'submitter': 'str',
        'exchange': 'str',
        'comission': 'float',
        'net_amount': 'float',
        'account': 'str',
        'company_name': 'str',
        'contract_description_1': 'str',
        'sec_type': 'str',
        'conidex': 'str',
        'position': 'str',
        'clearing_id': 'str',
        'clearing_name': 'str',
        'order_ref': 'str'
    }

    attribute_map = {
        'execution_id': 'execution_id',
        'symbol': 'symbol',
        'side': 'side',
        'order_description': 'order_description',
        'trade_time': 'trade_time',
        'trade_time_r': 'trade_time_r',
        'size': 'size',
        'price': 'price',
        'submitter': 'submitter',
        'exchange': 'exchange',
        'comission': 'comission',
        'net_amount': 'net_amount',
        'account': 'account',
        'company_name': 'company_name',
        'contract_description_1': 'contract_description_1',
        'sec_type': 'sec_type',
        'conidex': 'conidex',
        'position': 'position',
        'clearing_id': 'clearing_id',
        'clearing_name': 'clearing_name',
        'order_ref': 'order_ref'
    }

    def __init__(self, execution_id=None, symbol=None, side=None, order_description=None, trade_time=None, trade_time_r=None, size=None, price=None, submitter=None, exchange=None, comission=None, net_amount=None, account=None, company_name=None, contract_description_1=None, sec_type=None, conidex=None, position=None, clearing_id=None, clearing_name=None, order_ref=None):  # noqa: E501
        """Trade - a model defined in Swagger"""  # noqa: E501

        self._execution_id = None
        self._symbol = None
        self._side = None
        self._order_description = None
        self._trade_time = None
        self._trade_time_r = None
        self._size = None
        self._price = None
        self._submitter = None
        self._exchange = None
        self._comission = None
        self._net_amount = None
        self._account = None
        self._company_name = None
        self._contract_description_1 = None
        self._sec_type = None
        self._conidex = None
        self._position = None
        self._clearing_id = None
        self._clearing_name = None
        self._order_ref = None
        self.discriminator = None

        if execution_id is not None:
            self.execution_id = execution_id
        if symbol is not None:
            self.symbol = symbol
        if side is not None:
            self.side = side
        if order_description is not None:
            self.order_description = order_description
        if trade_time is not None:
            self.trade_time = trade_time
        if trade_time_r is not None:
            self.trade_time_r = trade_time_r
        if size is not None:
            self.size = size
        if price is not None:
            self.price = price
        if submitter is not None:
            self.submitter = submitter
        if exchange is not None:
            self.exchange = exchange
        if comission is not None:
            self.comission = comission
        if net_amount is not None:
            self.net_amount = net_amount
        if account is not None:
            self.account = account
        if company_name is not None:
            self.company_name = company_name
        if contract_description_1 is not None:
            self.contract_description_1 = contract_description_1
        if sec_type is not None:
            self.sec_type = sec_type
        if conidex is not None:
            self.conidex = conidex
        if position is not None:
            self.position = position
        if clearing_id is not None:
            self.clearing_id = clearing_id
        if clearing_name is not None:
            self.clearing_name = clearing_name
        if order_ref is not None:
            self.order_ref = order_ref

    @property
    def execution_id(self):
        """Gets the execution_id of this Trade.  # noqa: E501


        :return: The execution_id of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this Trade.


        :param execution_id: The execution_id of this Trade.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def symbol(self):
        """Gets the symbol of this Trade.  # noqa: E501


        :return: The symbol of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Trade.


        :param symbol: The symbol of this Trade.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def side(self):
        """Gets the side of this Trade.  # noqa: E501


        :return: The side of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Trade.


        :param side: The side of this Trade.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def order_description(self):
        """Gets the order_description of this Trade.  # noqa: E501


        :return: The order_description of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._order_description

    @order_description.setter
    def order_description(self, order_description):
        """Sets the order_description of this Trade.


        :param order_description: The order_description of this Trade.  # noqa: E501
        :type: str
        """

        self._order_description = order_description

    @property
    def trade_time(self):
        """Gets the trade_time of this Trade.  # noqa: E501


        :return: The trade_time of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._trade_time

    @trade_time.setter
    def trade_time(self, trade_time):
        """Sets the trade_time of this Trade.


        :param trade_time: The trade_time of this Trade.  # noqa: E501
        :type: str
        """

        self._trade_time = trade_time

    @property
    def trade_time_r(self):
        """Gets the trade_time_r of this Trade.  # noqa: E501


        :return: The trade_time_r of this Trade.  # noqa: E501
        :rtype: float
        """
        return self._trade_time_r

    @trade_time_r.setter
    def trade_time_r(self, trade_time_r):
        """Sets the trade_time_r of this Trade.


        :param trade_time_r: The trade_time_r of this Trade.  # noqa: E501
        :type: float
        """

        self._trade_time_r = trade_time_r

    @property
    def size(self):
        """Gets the size of this Trade.  # noqa: E501


        :return: The size of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Trade.


        :param size: The size of this Trade.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def price(self):
        """Gets the price of this Trade.  # noqa: E501


        :return: The price of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Trade.


        :param price: The price of this Trade.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def submitter(self):
        """Gets the submitter of this Trade.  # noqa: E501


        :return: The submitter of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._submitter

    @submitter.setter
    def submitter(self, submitter):
        """Sets the submitter of this Trade.


        :param submitter: The submitter of this Trade.  # noqa: E501
        :type: str
        """

        self._submitter = submitter

    @property
    def exchange(self):
        """Gets the exchange of this Trade.  # noqa: E501


        :return: The exchange of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Trade.


        :param exchange: The exchange of this Trade.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def comission(self):
        """Gets the comission of this Trade.  # noqa: E501


        :return: The comission of this Trade.  # noqa: E501
        :rtype: float
        """
        return self._comission

    @comission.setter
    def comission(self, comission):
        """Sets the comission of this Trade.


        :param comission: The comission of this Trade.  # noqa: E501
        :type: float
        """

        self._comission = comission

    @property
    def net_amount(self):
        """Gets the net_amount of this Trade.  # noqa: E501


        :return: The net_amount of this Trade.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this Trade.


        :param net_amount: The net_amount of this Trade.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def account(self):
        """Gets the account of this Trade.  # noqa: E501


        :return: The account of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Trade.


        :param account: The account of this Trade.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def company_name(self):
        """Gets the company_name of this Trade.  # noqa: E501


        :return: The company_name of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Trade.


        :param company_name: The company_name of this Trade.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def contract_description_1(self):
        """Gets the contract_description_1 of this Trade.  # noqa: E501


        :return: The contract_description_1 of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._contract_description_1

    @contract_description_1.setter
    def contract_description_1(self, contract_description_1):
        """Sets the contract_description_1 of this Trade.


        :param contract_description_1: The contract_description_1 of this Trade.  # noqa: E501
        :type: str
        """

        self._contract_description_1 = contract_description_1

    @property
    def sec_type(self):
        """Gets the sec_type of this Trade.  # noqa: E501


        :return: The sec_type of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this Trade.


        :param sec_type: The sec_type of this Trade.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    @property
    def conidex(self):
        """Gets the conidex of this Trade.  # noqa: E501


        :return: The conidex of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._conidex

    @conidex.setter
    def conidex(self, conidex):
        """Sets the conidex of this Trade.


        :param conidex: The conidex of this Trade.  # noqa: E501
        :type: str
        """

        self._conidex = conidex

    @property
    def position(self):
        """Gets the position of this Trade.  # noqa: E501


        :return: The position of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Trade.


        :param position: The position of this Trade.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def clearing_id(self):
        """Gets the clearing_id of this Trade.  # noqa: E501


        :return: The clearing_id of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._clearing_id

    @clearing_id.setter
    def clearing_id(self, clearing_id):
        """Sets the clearing_id of this Trade.


        :param clearing_id: The clearing_id of this Trade.  # noqa: E501
        :type: str
        """

        self._clearing_id = clearing_id

    @property
    def clearing_name(self):
        """Gets the clearing_name of this Trade.  # noqa: E501


        :return: The clearing_name of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._clearing_name

    @clearing_name.setter
    def clearing_name(self, clearing_name):
        """Sets the clearing_name of this Trade.


        :param clearing_name: The clearing_name of this Trade.  # noqa: E501
        :type: str
        """

        self._clearing_name = clearing_name

    @property
    def order_ref(self):
        """Gets the order_ref of this Trade.  # noqa: E501

        User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.  # noqa: E501

        :return: The order_ref of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._order_ref

    @order_ref.setter
    def order_ref(self, order_ref):
        """Sets the order_ref of this Trade.

        User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.  # noqa: E501

        :param order_ref: The order_ref of this Trade.  # noqa: E501
        :type: str
        """

        self._order_ref = order_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

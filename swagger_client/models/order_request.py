# coding: utf-8

"""
    Client Portal Web API

    Production version of the Client Portal Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acct_id': 'str',
        'conid': 'int',
        'sec_type': 'str',
        'c_oid': 'str',
        'parent_id': 'str',
        'order_type': 'str',
        'listing_exchange': 'str',
        'outside_rth': 'bool',
        'price': 'float',
        'side': 'str',
        'ticker': 'str',
        'tif': 'str',
        'referrer': 'str',
        'quantity': 'float',
        'fx_qty': 'float',
        'use_adaptive': 'bool',
        'is_currency_conversion': 'bool'
    }

    attribute_map = {
        'acct_id': 'acctId',
        'conid': 'conid',
        'sec_type': 'secType',
        'c_oid': 'cOID',
        'parent_id': 'parentId',
        'order_type': 'orderType',
        'listing_exchange': 'listingExchange',
        'outside_rth': 'outsideRTH',
        'price': 'price',
        'side': 'side',
        'ticker': 'ticker',
        'tif': 'tif',
        'referrer': 'referrer',
        'quantity': 'quantity',
        'fx_qty': 'fxQty',
        'use_adaptive': 'useAdaptive',
        'is_currency_conversion': 'isCurrencyConversion'
    }

    def __init__(self, acct_id=None, conid=None, sec_type=None, c_oid=None, parent_id=None, order_type=None, listing_exchange=None, outside_rth=None, price=None, side=None, ticker=None, tif=None, referrer=None, quantity=None, fx_qty=None, use_adaptive=None, is_currency_conversion=None):  # noqa: E501
        """OrderRequest - a model defined in Swagger"""  # noqa: E501

        self._acct_id = None
        self._conid = None
        self._sec_type = None
        self._c_oid = None
        self._parent_id = None
        self._order_type = None
        self._listing_exchange = None
        self._outside_rth = None
        self._price = None
        self._side = None
        self._ticker = None
        self._tif = None
        self._referrer = None
        self._quantity = None
        self._fx_qty = None
        self._use_adaptive = None
        self._is_currency_conversion = None
        self.discriminator = None

        if acct_id is not None:
            self.acct_id = acct_id
        if conid is not None:
            self.conid = conid
        if sec_type is not None:
            self.sec_type = sec_type
        if c_oid is not None:
            self.c_oid = c_oid
        if parent_id is not None:
            self.parent_id = parent_id
        if order_type is not None:
            self.order_type = order_type
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if outside_rth is not None:
            self.outside_rth = outside_rth
        if price is not None:
            self.price = price
        if side is not None:
            self.side = side
        if ticker is not None:
            self.ticker = ticker
        if tif is not None:
            self.tif = tif
        if referrer is not None:
            self.referrer = referrer
        if quantity is not None:
            self.quantity = quantity
        if fx_qty is not None:
            self.fx_qty = fx_qty
        if use_adaptive is not None:
            self.use_adaptive = use_adaptive
        if is_currency_conversion is not None:
            self.is_currency_conversion = is_currency_conversion

    @property
    def acct_id(self):
        """Gets the acct_id of this OrderRequest.  # noqa: E501

        acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected.   # noqa: E501

        :return: The acct_id of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._acct_id

    @acct_id.setter
    def acct_id(self, acct_id):
        """Sets the acct_id of this OrderRequest.

        acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected.   # noqa: E501

        :param acct_id: The acct_id of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._acct_id = acct_id

    @property
    def conid(self):
        """Gets the conid of this OrderRequest.  # noqa: E501

        conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search.   # noqa: E501

        :return: The conid of this OrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this OrderRequest.

        conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search.   # noqa: E501

        :param conid: The conid of this OrderRequest.  # noqa: E501
        :type: int
        """

        self._conid = conid

    @property
    def sec_type(self):
        """Gets the sec_type of this OrderRequest.  # noqa: E501

        conid:type for example 265598:STK  # noqa: E501

        :return: The sec_type of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this OrderRequest.

        conid:type for example 265598:STK  # noqa: E501

        :param sec_type: The sec_type of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    @property
    def c_oid(self):
        """Gets the c_oid of this OrderRequest.  # noqa: E501

        Customer Order ID. An arbitraty string that can be used to identify the order, e.g \"my-fb-order\". The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order.   # noqa: E501

        :return: The c_oid of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._c_oid

    @c_oid.setter
    def c_oid(self, c_oid):
        """Sets the c_oid of this OrderRequest.

        Customer Order ID. An arbitraty string that can be used to identify the order, e.g \"my-fb-order\". The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order.   # noqa: E501

        :param c_oid: The c_oid of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._c_oid = c_oid

    @property
    def parent_id(self):
        """Gets the parent_id of this OrderRequest.  # noqa: E501

        When placing bracket orders, the child parentId must be equal to the cOId (customer order id) of the parent.   # noqa: E501

        :return: The parent_id of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this OrderRequest.

        When placing bracket orders, the child parentId must be equal to the cOId (customer order id) of the parent.   # noqa: E501

        :param parent_id: The parent_id of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def order_type(self):
        """Gets the order_type of this OrderRequest.  # noqa: E501

        orderType can be one of MKT (Market), LMT (Limit), STP (Stop) or STP_LIMIT (stop limit)   # noqa: E501

        :return: The order_type of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this OrderRequest.

        orderType can be one of MKT (Market), LMT (Limit), STP (Stop) or STP_LIMIT (stop limit)   # noqa: E501

        :param order_type: The order_type of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this OrderRequest.  # noqa: E501

        listingExchange is optional. By default we use \"SMART\" routing. Possible values are available via this end point: /v1/portal/iserver/contract/{{conid}}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX   # noqa: E501

        :return: The listing_exchange of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this OrderRequest.

        listingExchange is optional. By default we use \"SMART\" routing. Possible values are available via this end point: /v1/portal/iserver/contract/{{conid}}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX   # noqa: E501

        :param listing_exchange: The listing_exchange of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def outside_rth(self):
        """Gets the outside_rth of this OrderRequest.  # noqa: E501

        set to true if the order can be executed outside regular trading hours.   # noqa: E501

        :return: The outside_rth of this OrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this OrderRequest.

        set to true if the order can be executed outside regular trading hours.   # noqa: E501

        :param outside_rth: The outside_rth of this OrderRequest.  # noqa: E501
        :type: bool
        """

        self._outside_rth = outside_rth

    @property
    def price(self):
        """Gets the price of this OrderRequest.  # noqa: E501

        optional if order is MKT, for LMT, this is the limit price. For STP this is the stop price.   # noqa: E501

        :return: The price of this OrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderRequest.

        optional if order is MKT, for LMT, this is the limit price. For STP this is the stop price.   # noqa: E501

        :param price: The price of this OrderRequest.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def side(self):
        """Gets the side of this OrderRequest.  # noqa: E501

        SELL or BUY  # noqa: E501

        :return: The side of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderRequest.

        SELL or BUY  # noqa: E501

        :param side: The side of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def ticker(self):
        """Gets the ticker of this OrderRequest.  # noqa: E501

          # noqa: E501

        :return: The ticker of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this OrderRequest.

          # noqa: E501

        :param ticker: The ticker of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def tif(self):
        """Gets the tif of this OrderRequest.  # noqa: E501

        GTC (Good Till Cancel) or DAY. DAY orders are automatically cancelled at the end of the Day or Trading hours.   # noqa: E501

        :return: The tif of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._tif

    @tif.setter
    def tif(self, tif):
        """Sets the tif of this OrderRequest.

        GTC (Good Till Cancel) or DAY. DAY orders are automatically cancelled at the end of the Day or Trading hours.   # noqa: E501

        :param tif: The tif of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._tif = tif

    @property
    def referrer(self):
        """Gets the referrer of this OrderRequest.  # noqa: E501

        for example QuickTrade  # noqa: E501

        :return: The referrer of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this OrderRequest.

        for example QuickTrade  # noqa: E501

        :param referrer: The referrer of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def quantity(self):
        """Gets the quantity of this OrderRequest.  # noqa: E501

        usually integer, for some special cases can be float numbers  # noqa: E501

        :return: The quantity of this OrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderRequest.

        usually integer, for some special cases can be float numbers  # noqa: E501

        :param quantity: The quantity of this OrderRequest.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def fx_qty(self):
        """Gets the fx_qty of this OrderRequest.  # noqa: E501

        double number, this is the cash quantity field which can only be used for FX conversion order.   # noqa: E501

        :return: The fx_qty of this OrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._fx_qty

    @fx_qty.setter
    def fx_qty(self, fx_qty):
        """Sets the fx_qty of this OrderRequest.

        double number, this is the cash quantity field which can only be used for FX conversion order.   # noqa: E501

        :param fx_qty: The fx_qty of this OrderRequest.  # noqa: E501
        :type: float
        """

        self._fx_qty = fx_qty

    @property
    def use_adaptive(self):
        """Gets the use_adaptive of this OrderRequest.  # noqa: E501

        If true, the system will use the Adaptive Algo to submit the order https://www.interactivebrokers.com/en/index.php?f=19091   # noqa: E501

        :return: The use_adaptive of this OrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_adaptive

    @use_adaptive.setter
    def use_adaptive(self, use_adaptive):
        """Sets the use_adaptive of this OrderRequest.

        If true, the system will use the Adaptive Algo to submit the order https://www.interactivebrokers.com/en/index.php?f=19091   # noqa: E501

        :param use_adaptive: The use_adaptive of this OrderRequest.  # noqa: E501
        :type: bool
        """

        self._use_adaptive = use_adaptive

    @property
    def is_currency_conversion(self):
        """Gets the is_currency_conversion of this OrderRequest.  # noqa: E501

        set to true if the order is a FX conversion order   # noqa: E501

        :return: The is_currency_conversion of this OrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_currency_conversion

    @is_currency_conversion.setter
    def is_currency_conversion(self, is_currency_conversion):
        """Sets the is_currency_conversion of this OrderRequest.

        set to true if the order is a FX conversion order   # noqa: E501

        :param is_currency_conversion: The is_currency_conversion of this OrderRequest.  # noqa: E501
        :type: bool
        """

        self._is_currency_conversion = is_currency_conversion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
